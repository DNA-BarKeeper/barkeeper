# Write SPECIMENS & STATUS to Excel-XML (xls) for use by ZFMK for their "Portal / db : bolgermany.de "
class SpecimenExporter < ApplicationRecord
  include ActionView::Helpers

  has_attached_file :specimen_export,
                    path: '/specimens_export.xls'

  # Validate content type
  validates_attachment_content_type :specimen_export, content_type: /\Aapplication\/xml/
  # Validate filename
  validates_attachment_file_name :specimen_export, matches: [/xls\Z/]

  def create_specimen_export(project_id)
    file_to_upload = File.open('specimens_export.xls', 'w')
    file_to_upload.write(xml_string(project_id))
    file_to_upload.close

    self.specimen_export = File.open('specimens_export.xls')
    self.save!
  end

  def xml_string(project_id)
    markers = Marker.gbol_marker

    @states = %w[Baden-WÃ¼rttemberg Bayern Berlin Brandenburg Bremen Hamburg
                 Hessen Mecklenburg-Vorpommern Niedersachsen Nordrhein-Westfalen 
                 Rheinland-Pfalz Saarland Sachsen Sachsen-Anhalt Schleswig-Holstein 
                 ThÃ¼ringen]

    @header_cells = ['GBOL5 specimen ID',
                     'Feldnummer',
                     'Institut',
                     'Sammlungs-Nr.',
                     'Familie',
                     'Taxon-Name',
                     'Erstbeschreiber Jahr',
                     'evtl. Bemerkung Taxonomie',
                     'Name',
                     'Datum',
                     'Gewebetyp und Menge',
                     'Anzahl Individuen',
                     'Fixierungsmethode',
                     'Entwicklungsstadium',
                     'Sex',
                     'evtl. Bemerkungen zur Probe',
                     'Fundortbeschreibung',
                     'Region',
                     'Bundesland',
                     'Land',
                     'Datum',
                     'Sammelmethode',
                     'Breitengrad',
                     'Längengrad',
                     'Benutzte Methode',
                     'Ungenauigkeitsangabe',
                     'Höhe/Tiefe [m]',
                     'Habitat',
                     'Sammler',
                     'Nummer',
                     'Behörde']

    markers.each do |m|
      @header_cells << "#{m.name} - URL"
      @header_cells << "#{m.name} - Marker Sequence"
      @header_cells << "#{m.name} - Genbank ID"
    end

    builder = Nokogiri::XML::Builder.new do |xml|
      xml.comment("Generated by gbol5.de web app on #{Time.zone.now}")
      xml.Workbook('xmlns'=>'urn:schemas-microsoft-com:office:spreadsheet',
                   'xmlns:o'=>'urn:schemas-microsoft-com:office:office',
                   'xmlns:x'=>'urn:schemas-microsoft-com:office:excel',
                   'xmlns:ss'=>'urn:schemas-microsoft-com:office:spreadsheet',
                   'xmlns:html'=>'https://www.w3.org/TR/REC-html40') do
        xml.Worksheet('ss:Name'=>'Sheet1') do
          xml.Table do
            xml.Row do

              @header_cells.each do |o|
                xml.Cell do
                  xml.Data('ss:Type' => 'String') do
                    xml.text(o)
                  end
                end
              end

            end

            ActiveRecord::Base.uncached do
            # Individuals in current project
              Individual.includes(isolates: [contigs: [:marker_sequence, :marker, :isolate]], species: :family).in_project(project_id).find_each do |individual|
                xml.Row do
                  # GBOL5 specimen ID
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text(individual.id)
                    end
                  end

                  # Feldnummer
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      if individual.collection_nr
                        if individual.collection_nr.include?('s.n.') || individual.collection_nr.include?('s. n.')
                          xml.text('')
                        else
                          xml.text(individual.collection_nr)
                        end
                      end
                    end
                  end

                  # Institut
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text(individual.herbarium)
                    end
                  end

                  # Sammlungsnummer
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      if individual.specimen_id == '<no info available in DNA Bank>'
                        xml.text('')
                      else
                        xml.text(individual.specimen_id)
                      end
                    end
                  end

                  # Familie
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text(individual.try(:species).try(:family).try(:name))
                    end
                  end

                  # Taxonname
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text(individual.try(:species).try(:name_for_display))
                    end
                  end

                  # Erstbeschreiber Jahr
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text(individual.try(:species).try(:author))
                    end
                  end

                  # evtl. Bemerkung Taxonomie
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text('')
                    end
                  end

                  # Name
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text(individual.determination)
                    end
                  end

                  # Datum
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text('')
                    end
                  end

                  # Gewebetyp und Menge
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text('Blattmaterial')
                    end
                  end

                  # Anzahl Individuen
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text('')
                    end
                  end

                  # Fixierungsmethode
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text('Silica gel')
                    end
                  end

                  # Entwicklungsstadium
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text('')
                    end
                  end

                  # Sex
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text('')
                    end
                  end

                  # evtl. Bemerkungen zur Probe
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text("gbol5.de/individuals/#{individual.id}/edit")
                    end
                  end

                  # Fundortbeschreibung
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text(individual.locality)
                    end
                  end

                  # Region
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text('')
                    end
                  end

                  # Bundesland
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do

                      if individual.country == 'Germany' or individual.country == 'Deutschland'
                        # tests first if is a Bundesland; outputs nothing if other crap was entered in this field:

                        if @states.include? individual.state_province
                          xml.text(individual.state_province)
                        else
                          xml.text('')
                        end

                        # stuff from Schweiz etc
                      else
                        xml.text('Europa')
                      end
                    end
                  end

                  # Land
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text(individual.country)
                    end
                  end

                  # Datum
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text(individual.collection_date)
                    end
                  end

                  # Sammelmethode
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text('')
                    end
                  end

                  # Breitengrad
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text(number_with_precision(individual.latitude, precision:5))
                    end
                  end

                  # Längengrad
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text(number_with_precision(individual.longitude, precision:5))
                    end
                  end

                  # Benutzte Methode
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text('')
                    end
                  end

                  # Ungenauigkeitsangabe
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text('')
                    end
                  end

                  # Höhe/Tiefe [m]
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text(individual.elevation)
                    end
                  end

                  # Habitat
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text(individual.habitat)
                    end
                  end

                  # Sammler
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text(individual.collector)
                    end
                  end

                  # Nummer
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text(individual.collection_nr)
                    end
                  end

                  # Behörde
                  xml.Cell do
                    xml.Data('ss:Type' => 'String') do
                      xml.text('')
                    end
                  end

                  # Find longest marker sequence per GBoL marker for each individual
                  longest_sequences = {}

                  individual.try(:isolates).each do |iso|
                    markers.each do |current_marker|

                      current_contig = iso.try(:contigs).includes(marker_sequence: :contigs).where(marker_id: current_marker.id).first
                      current_marker_sequence = current_contig&.marker_sequence
                      current_ms_sequence = current_marker_sequence&.sequence

                      if current_ms_sequence
                        longest_sequences[current_marker.id] ||= current_marker_sequence
                        if current_ms_sequence.length > longest_sequences[current_marker.id].sequence.length
                          longest_sequences[current_marker.id] = current_marker_sequence
                        end
                      end

                    end
                  end

                  markers.each do |marker|
                    current_sequence = longest_sequences[marker.id]
                    current_ms = current_sequence&.sequence

                    # URL zum contig in GBoL5 WebApp
                    xml.Cell do
                      xml.Data('ss:Type' => 'String') do
                        current_contig_id = current_sequence&.contigs&.first&.id
                        if current_contig_id
                          xml.text("gbol5.de/contigs/#{current_contig_id}/edit") #edit_contig_path(current_sequence.contigs.first)
                        end
                      end
                    end

                    # Markersequenz
                    xml.Cell do
                      xml.Data('ss:Type' => 'String') do
                        if current_ms
                          xml.text(current_ms)
                        end
                      end
                    end

                    # Genbank ID
                    xml.Cell do
                      xml.Data('ss:Type' => 'String') do
                        if current_ms && current_sequence&.genbank
                          xml.text(current_sequence.genbank)
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    builder.to_xml
  end
end