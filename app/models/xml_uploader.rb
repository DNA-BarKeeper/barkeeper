class XmlUploader < ActiveRecord::Base

  #todo later rename  :uploaded_file to xml_File or s.th.

  has_attached_file :uploaded_file,
                    :storage => :s3,
                    :s3_credentials => Proc.new{ |a| a.instance.s3_credentials },
                    :path => "/specimens.xls"

  # Validate content type
  validates_attachment_content_type :uploaded_file, :content_type => /\Aapplication\/xml/

  # Validate filename
  validates_attachment_file_name :uploaded_file, :matches => [/xls\Z/]

  def create_uploaded_file

    file_to_upload = File.open("specimens.xls", "w")

    file_to_upload.write(xml_string)
    file_to_upload.close()
    self.uploaded_file = File.open("specimens.xls")
    self.save!

    # puts xml_string
  end

  #todo remove s3 credentials from code everywhere

  def s3_credentials
    {:bucket => "gbol5", :access_key_id => "AKIAINH5TDSKSWQ6J62A", :secret_access_key => "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"}
  end

  def xml_string
    # get all indiv.
    @individuals=Individual.includes(:species => :family).all

    # todo fillw with specimen data:

    @header_cells = ["GBOL-Nr.", "Feldnummer", "Institut", "Sammlungs-Nr.",
                     "Familie",
                     "Taxon-Name",
                     "Erstbeschreiber Jahr",
                     "evtl. Bemerkung Taxonomie",
                     "Name",
                     "Datum",
                     "Gewebetyp und Menge",
                     "Anzahl Individuen",
                     "Fixierungsmethode"   ,
                     "Entwicklungsstadium",
                     "Sex",
                     "evtl. Bemerkungen zur Probe",
                     "Fundortbeschreibung",
                     "Region",
                     "Bundesland",
                     "Land",
                     "Datum",
                     "Sammelmethode",
                     "Breitengrad",
                     "Längengrad",
                     "Benutzte Methode",
                     "Ungenauigkeitsangabe",
                     "Höhe/Tiefe [m]",
                     "Habitat",
                     "Sammler",
                     "Nummer",
                     "Behörde"
    ]


    builder = Nokogiri::XML::Builder.new do |xml|

      xml.comment("Automatically generated by gbol5.de web app on #{Time.now}")
      xml.Workbook('xmlns'=>"urn:schemas-microsoft-com:office:spreadsheet",
                   'xmlns:o'=>"urn:schemas-microsoft-com:office:office",
                   'xmlns:x'=>"urn:schemas-microsoft-com:office:excel",
                   'xmlns:ss'=>"urn:schemas-microsoft-com:office:spreadsheet",
                   'xmlns:html'=>"http://www.w3.org/TR/REC-html40") {
        xml.Worksheet('ss:Name'=>"Sheet1") {
          xml.Table {
            xml.Row{

              @header_cells.each do |o|
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text(o)
                  }
                }
              end

            }
            @individuals.each do |individual|
              xml.Row{
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text(individual.try(:isolates).first.try(:lab_nr))
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text(individual.collection_nr)
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text(individual.herbarium)
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text(individual.specimen_id)
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text(individual.try(:species).try(:family).try(:name))
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text(individual.try(:species).try(:name_for_display))
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text(individual.try(:species).try(:author))
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text("")
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text(individual.determination)
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text("")
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text("Blattmaterial")
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text("")
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text("Silica gel")
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text("")
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text("")
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text(individual.comments)
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text(individual.locality)
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text("")
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text(individual.state_province)
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text(individual.country)
                  }
                }

                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text(individual.collection_date)
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text("")
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text(individual.latitude)
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text(individual.longitude)
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text("")
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text("")
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text(individual.elevation)
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text(individual.habitat)
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text(individual.collector)
                  }
                }
                xml.Cell {
                  xml.Data('ss:Type' => "String") {
                    xml.text(individual.collection_nr)
                  }
                }
              }
            end
          }
        }
      }

    end

    builder.to_xml

  end


end