# frozen_string_literal: true

class CompareContigs
  include Sidekiq::Worker

  # def perform(contig_names)
  #
  #   no_match_list="Comparison of local externally edited contigs (.fas) with contigs in database. Generated by gbol5.de web app on #{Time.zone.now}\n\nNo matches found for:\n\n"
  #
  #   match_list="\n\nMatches found for:\n\n"
  #
  #   # parse contig_names string into array
  #   contig_names_array=contig_names.split
  #
  #   #loop over contig_names array
  #   contig_names_array.each do |c|
  #
  #     contig_name=c[0...-4]
  #
  #     #match found?
  #     contig = Contig.where("name ILIKE ?", contig_name).first
  #     if contig
  #       match_list+="#{c}"
  #       if contig.verified or !contig.verified_by.nil?
  #         match_list+="\tverified"
  #       end
  #       match_list+="\n"
  #     else
  #       # retry by extracting one primer name and selecting the marker this primer is assigned to
  #       # extract primer_name
  #
  #       regex= /^([A-Za-z0-9]+)_(.+)$/
  #       m=contig_name.match(regex)
  #       if m
  #         isolate_name=m[1]
  #         begin
  #           primer_names= m[2]
  #           primer_name=primer_names.split("_").last
  #           primer=Primer.where("name ILIKE ?", primer_name).first
  #           if primer
  #             marker=primer.marker
  #             if marker
  #               true_marker_name=marker.name
  #               true_contig_name=isolate_name+"_#{true_marker_name}"
  #               contig = Contig.where("name ILIKE ?", true_contig_name).first
  #               if contig
  #                 match_list+="#{c} (found as #{true_contig_name})"
  #                 if contig.verified or !contig.verified_by.nil?
  #                   match_list+="\tverified"
  #                 end
  #                 match_list+="\n"
  #               else
  #                 no_match_list+="#{c}\n"
  #               end
  #             else
  #               no_match_list+="#{c}\n"
  #             end
  #           else
  #             no_match_list+="#{c}\n"
  #           end
  #         rescue
  #           no_match_list+="#{c}\n"
  #         end
  #       else
  #         no_match_list+="#{c}\n"
  #       end
  #     end
  #   end
  #
  #   no_match_list+=match_list
  #
  #   # create & store file on S3 -> as for zfmk
  #   TxtUploader.new.create_uploaded_file(no_match_list)
  #
  #   end

  # variant to quickly set to verified:
  def perform(contig_names)
    no_match_list = "Comparison of local externally edited contigs (.fas) with contigs in database. Generated by gbol5.de web app on #{Time.zone.now}\n\nNo matches found for:\n\n"

    match_list = "\n\nMatches found for:\n\n"

    # parse contig_names string into array
    contig_names_array = contig_names.split

    # loop over contig_names array
    contig_names_array.each do |c|
      contig_name = c[0...-4]

      # match found?
      contig = Contig.where('name ILIKE ?', contig_name).first
      if contig
        match_list += c.to_s
        if contig.verified || !contig.verified_by.nil?
          match_list += "\tverified"
        else
          contig.verified = true
          contig.save
        end
        match_list += "\n"
      else
        # retry by extracting one primer name and selecting the marker this primer is assigned to
        # extract primer_name

        regex = /^([A-Za-z0-9]+)_(.+)$/
        m = contig_name.match(regex)
        if m
          isolate_name = m[1]
          begin
            primer_names = m[2]
            primer_name = primer_names.split('_').last
            primer = Primer.where('name ILIKE ?', primer_name).first
            if primer
              marker = primer.marker
              if marker
                true_marker_name = marker.name
                true_contig_name = isolate_name + "_#{true_marker_name}"
                contig = Contig.where('name ILIKE ?', true_contig_name).first
                if contig
                  match_list += "#{c} (found as #{true_contig_name})"
                  if contig.verified || !contig.verified_by.nil?
                    match_list += "\tverified"
                  else
                    contig.verified = true
                    contig.save
                  end
                  match_list += "\n"
                else
                  no_match_list += "#{c}\n"
                end
              else
                no_match_list += "#{c}\n"
              end
            else
              no_match_list += "#{c}\n"
            end
          rescue StandardError
            no_match_list += "#{c}\n"
          end
        else
          no_match_list += "#{c}\n"
        end
      end
    end

    no_match_list += match_list

    # create & store file on S3 -> as for zfmk
    TxtUploader.new.create_uploaded_file(no_match_list)
  end

  # tmp variant to return problem cases with >1 partial_cons only:
  # def perform(contig_names)
  #
  #   no_match_list="Comparison of local externally edited contigs (.fas) with contigs in database. Generated by gbol5.de web app on #{Time.zone.now}\n\nNo matches found for:\n\n"
  #
  #   match_list="\n\nMatches with > 1 partial_cons found for:\n\n"
  #
  #   # parse contig_names string into array
  #   contig_names_array=contig_names.split
  #
  #   #loop over contig_names array
  #   contig_names_array.each do |c|
  #
  #     contig_name=c[0...-4]
  #
  #     #match found?
  #     contig = Contig.where("name ILIKE ?", contig_name).where("partial_cons_count > ?", 1).first
  #     if contig
  #       match_list+="#{c}"
  #       if contig.verified or !contig.verified_by.nil?
  #         match_list+="\tverified"
  #       end
  #       match_list+="\n"
  #     else
  #       # retry by extracting one primer name and selecting the marker this primer is assigned to
  #       # extract primer_name
  #
  #       regex= /^([A-Za-z0-9]+)_(.+)$/
  #       m=contig_name.match(regex)
  #       if m
  #         isolate_name=m[1]
  #         begin
  #           primer_names= m[2]
  #           primer_name=primer_names.split("_").last
  #           primer=Primer.where("name ILIKE ?", primer_name).first
  #           if primer
  #             marker=primer.marker
  #             if marker
  #               true_marker_name=marker.name
  #               true_contig_name=isolate_name+"_#{true_marker_name}"
  #               contig = Contig.where("name ILIKE ?", true_contig_name).where("partial_cons_count > ?", 1).first
  #               if contig
  #                 match_list+="#{c} (found as #{true_contig_name})"
  #                 if contig.verified or !contig.verified_by.nil?
  #                   match_list+="\tverified"
  #                 end
  #                 match_list+="\n"
  #               else
  #                 no_match_list+="#{c}\n"
  #               end
  #             else
  #               no_match_list+="#{c}\n"
  #             end
  #           else
  #             no_match_list+="#{c}\n"
  #           end
  #         rescue
  #           no_match_list+="#{c}\n"
  #         end
  #       else
  #         no_match_list+="#{c}\n"
  #       end
  #     end
  #   end
  #
  #   no_match_list+=match_list
  #
  #   # create & store file on S3 -> as for zfmk
  #   TxtUploader.new.create_uploaded_file(no_match_list)
  #
  # end
end
