#
# Barcode Workflow Manager - A web framework to assemble, analyze and manage DNA
# barcode data and metadata.
# Copyright (C) 2020 Kai MÃ¼ller <kaimueller@uni-muenster.de>, Sarah Wiechers
# <sarah.wiechers@uni-muenster.de>
#
# This file is part of Barcode Workflow Manager.
#
# Barcode Workflow Manager is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Barcode Workflow Manager is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Barcode Workflow Manager.  If not, see
# <http://www.gnu.org/licenses/>.
#
# frozen_string_literal: true

class CompareContigs
  include Sidekiq::Worker

  # Variant to quickly set to verified:
  def perform(contig_names)
    no_match_list = "Comparison of local externally edited contigs (.fas) with contigs in database. Generated by a Barcode Workflow Manager web app on #{Time.zone.now}\n\nNo matches found for:\n\n"

    match_list = "\n\nMatches found for:\n\n"

    # parse contig_names string into array
    contig_names_array = contig_names.split

    # loop over contig_names array
    contig_names_array.each do |c|
      contig_name = c[0...-4]

      # match found?
      contig = Contig.where('name ILIKE ?', contig_name).first
      if contig
        match_list += c.to_s
        if contig.verified || !contig.verified_by.nil?
          match_list += "\tverified"
        else
          contig.verified = true
          contig.save
        end
        match_list += "\n"
      else
        # retry by extracting one primer name and selecting the marker this primer is assigned to
        # extract primer_name

        regex = /^([A-Za-z0-9]+)_(.+)$/
        m = contig_name.match(regex)
        if m
          isolate_name = m[1]
          begin
            primer_names = m[2]
            primer_name = primer_names.split('_').last
            primer = Primer.where('name ILIKE ?', primer_name).first
            if primer
              marker = primer.marker
              if marker
                true_marker_name = marker.name
                true_contig_name = isolate_name + "_#{true_marker_name}"
                contig = Contig.where('name ILIKE ?', true_contig_name).first
                if contig
                  match_list += "#{c} (found as #{true_contig_name})"
                  if contig.verified || !contig.verified_by.nil?
                    match_list += "\tverified"
                  else
                    contig.verified = true
                    contig.save
                  end
                  match_list += "\n"
                else
                  no_match_list += "#{c}\n"
                end
              else
                no_match_list += "#{c}\n"
              end
            else
              no_match_list += "#{c}\n"
            end
          rescue StandardError
            no_match_list += "#{c}\n"
          end
        else
          no_match_list += "#{c}\n"
        end
      end
    end

    no_match_list += match_list

    # create & store file on S3
    TxtUploader.new.create_uploaded_file(no_match_list)
  end
end
